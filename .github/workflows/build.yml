name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install customtkinter>=5.2.0
        pip install pyinstaller>=5.0

    - name: Create spec files
      run: |
        python -c "
        import PyInstaller.config
        PyInstaller.config.CONF['distpath'] = './dist'
        
        # GUI spec
        gui_spec = '''
# -*- mode: python ; coding: utf-8 -*-
a = Analysis(
    ['gui.py'],
    pathex=[],
    binaries=[],
    datas=[('main.py', '.')],
    hiddenimports=['customtkinter', 'tkinter', 'PIL._tkinter_finder'],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=['matplotlib', 'numpy', 'scipy'],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)
pyz = PYZ(a.pure, a.zipped_data, cipher=None)
exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='FileSorter',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)
'''
        
        # CLI spec  
        cli_spec = '''
# -*- mode: python ; coding: utf-8 -*-
a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[],
    hiddenimports=[],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=['tkinter', 'customtkinter', 'PIL'],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)
pyz = PYZ(a.pure, a.zipped_data, cipher=None)
exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='file-sorter-cli',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)
'''
        
        with open('gui.spec', 'w') as f:
            f.write(gui_spec)
        with open('cli.spec', 'w') as f:
            f.write(cli_spec)
        "

    - name: Build executables
      run: |
        pyinstaller gui.spec
        pyinstaller cli.spec

    - name: Get version
      id: version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "version=dev" >> $GITHUB_OUTPUT
        fi

    - name: Create release package
      shell: bash
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        PLATFORM="${{ matrix.platform }}"
        ARCH="x86_64"
        
        if [[ "$PLATFORM" == "windows" ]]; then
          EXE_EXT=".exe"
        else
          EXE_EXT=""
        fi
        
        DIST_NAME="FileSorter-${VERSION}-${PLATFORM}-${ARCH}"
        mkdir -p "releases/${DIST_NAME}"
        
        # Copy executables if they exist
        if [[ -f "dist/FileSorter${EXE_EXT}" ]]; then
          cp "dist/FileSorter${EXE_EXT}" "releases/${DIST_NAME}/"
        fi
        
        if [[ -f "dist/file-sorter-cli${EXE_EXT}" ]]; then
          cp "dist/file-sorter-cli${EXE_EXT}" "releases/${DIST_NAME}/"
        fi
        
        # Copy documentation
        cp README.md "releases/${DIST_NAME}/" || echo "README.md not found"
        cp requirements.txt "releases/${DIST_NAME}/" || echo "requirements.txt not found"
        cp LICENSE "releases/${DIST_NAME}/" || echo "LICENSE not found"
        
        # Create install instructions
        cat > "releases/${DIST_NAME}/INSTALL.txt" << EOF
        File Sorter Pro v${VERSION}
        ==========================
        
        GUI Version: Double-click FileSorter${EXE_EXT}
        CLI Version: Run file-sorter-cli${EXE_EXT} from terminal
        
        No Python installation required!
        Platform: ${PLATFORM}-${ARCH}
        EOF
        
        # Create archive
        cd releases
        if [[ "$PLATFORM" == "windows" ]]; then
          powershell -Command "Compress-Archive -Path '${DIST_NAME}' -DestinationPath '${DIST_NAME}.zip'"
        else
          zip -r "${DIST_NAME}.zip" "${DIST_NAME}/"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: FileSorter-${{ steps.version.outputs.version }}-${{ matrix.platform }}-x86_64
        path: releases/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Move files to release directory
      run: |
        mkdir -p release-files
        find artifacts -name "*.zip" -exec cp {} release-files/ \;
        ls -la release-files/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## File Sorter Pro ${{ github.ref_name }}
          
          Cross-platform file sorting application with GUI and CLI interfaces.
          
          ### Downloads
          - **Linux**: FileSorter-*-linux-x86_64.zip
          - **Windows**: FileSorter-*-windows-x86_64.zip  
          - **macOS**: FileSorter-*-macos-x86_64.zip
          
          ### Quick Start
          1. Download the appropriate file for your OS
          2. Extract the zip file
          3. Run FileSorter (GUI) or file-sorter-cli (CLI)
          
          No Python installation required!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
